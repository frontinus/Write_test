
Writing_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002858  08002858  00003858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002868  08002868  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002868  08002868  00003868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002870  08002870  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002870  08002870  00003870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002874  08002874  00003874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002878  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002884  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002884  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000657d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ea  00000000  00000000  0000a5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000baa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052b  00000000  00000000  0000c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015851  00000000  00000000  0000c6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fc3  00000000  00000000  00021f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000850f9  00000000  00000000  00029edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aefd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b50  00000000  00000000  000af01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b0b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002840 	.word	0x08002840

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002840 	.word	0x08002840

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0aa      	sub	sp, #168	@ 0xa8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fc63 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f851 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f8ed 	bl	80006b4 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004da:	f000 f8b5 	bl	8000648 <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(!Flash_Init()){
 80004de:	f000 fbf3 	bl	8000cc8 <Flash_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d101      	bne.n	80004ec <main+0x24>
  	  while(1){
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <main+0x20>

  	  }
  }
  Flash_ChipErase();
 80004ec:	f000 fb36 	bl	8000b5c <Flash_ChipErase>
// SALVATAGGIO DI UN ARRAY DI INTERI, FUNZIONA


  float cazzi[20];

  for(int i = 0; i<20; i++){
 80004f0:	2300      	movs	r3, #0
 80004f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80004f6:	e016      	b.n	8000526 <main+0x5e>
	  cazzi[i] = (float)i + 1.0;
 80004f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80004fc:	ee07 3a90 	vmov	s15, r3
 8000500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800050c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	33a8      	adds	r3, #168	@ 0xa8
 8000514:	443b      	add	r3, r7
 8000516:	3b58      	subs	r3, #88	@ 0x58
 8000518:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i<20; i++){
 800051c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000520:	3301      	adds	r3, #1
 8000522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000526:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800052a:	2b13      	cmp	r3, #19
 800052c:	dde4      	ble.n	80004f8 <main+0x30>
  }
  Flash_Write_float(0,cazzi,sizeof(cazzi));
 800052e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000532:	2250      	movs	r2, #80	@ 0x50
 8000534:	4619      	mov	r1, r3
 8000536:	2000      	movs	r0, #0
 8000538:	f000 faac 	bl	8000a94 <Flash_Write_float>
  float test[20];
  for (int i = 0; i < 20; i++) {
 800053c:	2300      	movs	r3, #0
 800053e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000542:	e00d      	b.n	8000560 <main+0x98>
      test[i] = 0;
 8000544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	33a8      	adds	r3, #168	@ 0xa8
 800054c:	443b      	add	r3, r7
 800054e:	3ba8      	subs	r3, #168	@ 0xa8
 8000550:	f04f 0200 	mov.w	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 20; i++) {
 8000556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800055a:	3301      	adds	r3, #1
 800055c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000564:	2b13      	cmp	r3, #19
 8000566:	dded      	ble.n	8000544 <main+0x7c>
  }

  Flash_Read_float(0,test,sizeof(cazzi));
 8000568:	463b      	mov	r3, r7
 800056a:	2250      	movs	r2, #80	@ 0x50
 800056c:	4619      	mov	r1, r3
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fa2a 	bl	80009c8 <Flash_Read_float>





  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <main+0xac>

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 f92e 	bl	80027e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <SystemClock_Config+0xc8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a26      	ldr	r2, [pc, #152]	@ (8000640 <SystemClock_Config+0xc8>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <SystemClock_Config+0xc8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b21      	ldr	r3, [pc, #132]	@ (8000644 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a20      	ldr	r2, [pc, #128]	@ (8000644 <SystemClock_Config+0xcc>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000644 <SystemClock_Config+0xcc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005ec:	2360      	movs	r3, #96	@ 0x60
 80005ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fefd 	bl	80013fc <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 f898 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2103      	movs	r1, #3
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f95f 	bl	80018ec <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000634:	f000 f882 	bl	800073c <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3750      	adds	r7, #80	@ 0x50
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_SPI3_Init+0x64>)
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <MX_SPI3_Init+0x68>)
 8000650:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <MX_SPI3_Init+0x64>)
 8000654:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000658:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_SPI3_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_SPI3_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_SPI3_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_SPI3_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_SPI3_Init+0x64>)
 8000674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000678:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <MX_SPI3_Init+0x64>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <MX_SPI3_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_SPI3_Init+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <MX_SPI3_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_SPI3_Init+0x64>)
 8000694:	220a      	movs	r2, #10
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_SPI3_Init+0x64>)
 800069a:	f001 fad3 	bl	8001c44 <HAL_SPI_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80006a4:	f000 f84a 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000028 	.word	0x20000028
 80006b0:	40003c00 	.word	0x40003c00

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_GPIO_Init+0x80>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a18      	ldr	r2, [pc, #96]	@ (8000734 <MX_GPIO_Init+0x80>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_GPIO_Init+0x80>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_GPIO_Init+0x80>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <MX_GPIO_Init+0x80>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_GPIO_Init+0x80>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000708:	480b      	ldr	r0, [pc, #44]	@ (8000738 <MX_GPIO_Init+0x84>)
 800070a:	f000 fe5d 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FLASH_nCS_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin;
 800070e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071c:	2302      	movs	r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_nCS_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4619      	mov	r1, r3
 8000726:	4804      	ldr	r0, [pc, #16]	@ (8000738 <MX_GPIO_Init+0x84>)
 8000728:	f000 fcb2 	bl	8001090 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072c:	bf00      	nop
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40020000 	.word	0x40020000

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <Error_Handler+0x8>

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <HAL_MspInit+0x4c>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000756:	4a0f      	ldr	r2, [pc, #60]	@ (8000794 <HAL_MspInit+0x4c>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075c:	6453      	str	r3, [r2, #68]	@ 0x44
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_MspInit+0x4c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <HAL_MspInit+0x4c>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	@ 0x40
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a19      	ldr	r2, [pc, #100]	@ (800081c <HAL_SPI_MspInit+0x84>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d12c      	bne.n	8000814 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <HAL_SPI_MspInit+0x88>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	4a17      	ldr	r2, [pc, #92]	@ (8000820 <HAL_SPI_MspInit+0x88>)
 80007c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <HAL_SPI_MspInit+0x88>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <HAL_SPI_MspInit+0x88>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a10      	ldr	r2, [pc, #64]	@ (8000820 <HAL_SPI_MspInit+0x88>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <HAL_SPI_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SPI3_SCK_FLASH_Pin|SPI3_MISO_FLASH_Pin|SPI3_MOSI_FLASH_Pin;
 80007f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000804:	2306      	movs	r3, #6
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <HAL_SPI_MspInit+0x8c>)
 8000810:	f000 fc3e 	bl	8001090 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	@ 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40003c00 	.word	0x40003c00
 8000820:	40023800 	.word	0x40023800
 8000824:	40020800 	.word	0x40020800

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <NMI_Handler+0x4>

08000830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <MemManage_Handler+0x4>

08000840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <UsageFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087e:	f000 fadd 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Flash_Select>:
 * 			So testing CS pin let understand if a
 * 			transmission is still running:
 * 			before selecting chip a test over the same CS let
 * 			understand if previous transmission terminated
 ******************************************/
void Flash_Select(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
		while (SPI_IS_BUSY) {}
 80008b0:	bf00      	nop
 80008b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b6:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <Flash_Select+0x28>)
 80008b8:	f000 fd6e 	bl	8001398 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f7      	beq.n	80008b2 <Flash_Select+0x6>
		HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c8:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <Flash_Select+0x28>)
 80008ca:	f000 fd7d 	bl	80013c8 <HAL_GPIO_WritePin>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40020000 	.word	0x40020000

080008d8 <Flash_UnSelect>:

/******************************************
 * @brief	disable Flash SPI
 * 			verifying that there is no a running data transfer
 ******************************************/
void Flash_UnSelect(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	// CS pin must be low (selected flash) until previous transmission is completed
#ifdef	EXT_FLASH_SPI_POLLING_MODE
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);	//unselect
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e2:	4802      	ldr	r0, [pc, #8]	@ (80008ec <Flash_UnSelect+0x14>)
 80008e4:	f000 fd70 	bl	80013c8 <HAL_GPIO_WritePin>
#endif  // FLASH_SPI_POLLING_MODE
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40020000 	.word	0x40020000

080008f0 <Flash_Receive>:




void Flash_Receive(uint8_t* data, uint16_t dataSize){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 80008fc:	887a      	ldrh	r2, [r7, #2]
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	4803      	ldr	r0, [pc, #12]	@ (8000914 <Flash_Receive+0x24>)
 8000906:	f001 fb6a 	bl	8001fde <HAL_SPI_Receive>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000028 	.word	0x20000028

08000918 <Flash_Receive_float>:

void Flash_Receive_float(float* data, uint16_t dataSize){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (&FLASH_SPI_PORT , (uint8_t*)&data, dataSize, HAL_MAX_DELAY);
 8000924:	887a      	ldrh	r2, [r7, #2]
 8000926:	1d39      	adds	r1, r7, #4
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <Flash_Receive_float+0x24>)
 800092e:	f001 fb56 	bl	8001fde <HAL_SPI_Receive>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000028 	.word	0x20000028

08000940 <Flash_Transmit>:
 * 			you need to set this macro even using TouchGFX (having its own configuration parameter:
 * 			set DISPL_DMA_CUTOFF and CubeMX parameter to the same value)
 * @PARAM	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 **************************/
void Flash_Transmit(uint8_t* data, uint16_t dataSize){
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	if (dataSize<EXT_FLASH_DMA_CUTOFF) {
#endif //FLASH_SPI_POLLING_MODE
		HAL_SPI_Transmit(&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 800094c:	887a      	ldrh	r2, [r7, #2]
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <Flash_Transmit+0x24>)
 8000956:	f001 f9fe 	bl	8001d56 <HAL_SPI_Transmit>
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	} else {
		HAL_SPI_Transmit_DMA(&EXT_FLASH_SPI_PORT , data, dataSize);
	}
#endif  //FLASH_SPI_POLLING_MODE
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000028 	.word	0x20000028

08000968 <Flash_Transmit_float>:

void Flash_Transmit_float(float* data, uint16_t dataSize){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	if (dataSize<EXT_FLASH_DMA_CUTOFF) {
#endif //FLASH_SPI_POLLING_MODE
		HAL_SPI_Transmit(&FLASH_SPI_PORT , (uint8_t*)&data, dataSize, HAL_MAX_DELAY);
 8000974:	887a      	ldrh	r2, [r7, #2]
 8000976:	1d39      	adds	r1, r7, #4
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	4803      	ldr	r0, [pc, #12]	@ (800098c <Flash_Transmit_float+0x24>)
 800097e:	f001 f9ea 	bl	8001d56 <HAL_SPI_Transmit>
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	} else {
		HAL_SPI_Transmit_DMA(&EXT_FLASH_SPI_PORT , (uint8_t*)&data, dataSize);
	}
#endif  //FLASH_SPI_POLLING_MODE
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000028 	.word	0x20000028

08000990 <Flash_WaitForWritingComplete>:
/**************************
 * @BRIEF	keeps looping inside this function until "BUSY" bit in SR1 register
 * 			becomes 0, meaning that the runnin data operation (writing or erasing)
 * 			on the chip, ended
 **************************/
void Flash_WaitForWritingComplete(){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
uint8_t buffer[1];
	Flash_Select();
 8000996:	f7ff ff89 	bl	80008ac <Flash_Select>
	buffer[0] = W25_R_SR1;
 800099a:	2305      	movs	r3, #5
 800099c:	713b      	strb	r3, [r7, #4]
	Flash_Transmit(buffer, 1);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2101      	movs	r1, #1
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffcc 	bl	8000940 <Flash_Transmit>
	do {
		Flash_Receive(buffer, 1);  //SR1 is repeteadly sent until Flash is selected
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2101      	movs	r1, #1
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff9f 	bl	80008f0 <Flash_Receive>
	} while (buffer[0] & SR1_BIT_BUSY);
 80009b2:	793b      	ldrb	r3, [r7, #4]
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1f5      	bne.n	80009a8 <Flash_WaitForWritingComplete+0x18>
	Flash_UnSelect();
 80009bc:	f7ff ff8c 	bl	80008d8 <Flash_UnSelect>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <Flash_Read_float>:
		dataSize-=data_to_transfer;
	}
	Flash_UnSelect();
}

void Flash_Read_float(uint32_t addr, float* data, uint32_t dataSize){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
uint16_t data_to_transfer;
uint8_t buffer[5];

	buffer[0] = FLASH_READ_COMMAND;
 80009d4:	2303      	movs	r3, #3
 80009d6:	743b      	strb	r3, [r7, #16]
	buffer[1] = (addr >> 16) & 0xFF;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	747b      	strb	r3, [r7, #17]
	buffer[2] = (addr >> 8) & 0xFF;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	74bb      	strb	r3, [r7, #18]
	buffer[3] = addr & 0xFF;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	74fb      	strb	r3, [r7, #19]
	buffer[4] = W25_DUMMY;
 80009ee:	2300      	movs	r3, #0
 80009f0:	753b      	strb	r3, [r7, #20]
	Flash_Select();
 80009f2:	f7ff ff5b 	bl	80008ac <Flash_Select>
	Flash_Transmit(buffer, (FLASH_READ_COMMAND == W25_READ ? 4 : 5));  // "normal/slow" read command doesn't need sending dummy byte
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	2104      	movs	r1, #4
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff9f 	bl	8000940 <Flash_Transmit>

	// dataSize is 32 bit, spi_receive handles 16bit transfers, so I have to loop...
	while (dataSize) {
 8000a02:	e017      	b.n	8000a34 <Flash_Read_float+0x6c>
		data_to_transfer = ((dataSize>0xFFFF) ? 0xFFFF : (uint16_t)dataSize);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a0a:	d202      	bcs.n	8000a12 <Flash_Read_float+0x4a>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	e001      	b.n	8000a16 <Flash_Read_float+0x4e>
 8000a12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a16:	82fb      	strh	r3, [r7, #22]
		Flash_Receive_float(data, data_to_transfer);
 8000a18:	8afb      	ldrh	r3, [r7, #22]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	68b8      	ldr	r0, [r7, #8]
 8000a1e:	f7ff ff7b 	bl	8000918 <Flash_Receive_float>
		data+=data_to_transfer;
 8000a22:	8afb      	ldrh	r3, [r7, #22]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	4413      	add	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
		dataSize-=data_to_transfer;
 8000a2c:	8afb      	ldrh	r3, [r7, #22]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	607b      	str	r3, [r7, #4]
	while (dataSize) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1e4      	bne.n	8000a04 <Flash_Read_float+0x3c>
	}
	Flash_UnSelect();
 8000a3a:	f7ff ff4d 	bl	80008d8 <Flash_UnSelect>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <Flash_SimpleWriteAPage_float>:
	Flash_Transmit(buffer, 4);
	Flash_Transmit(data, dataSize);
	Flash_UnSelect();
}

void Flash_SimpleWriteAPage_float(uint32_t addr, float* data, uint16_t dataSize){
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	4613      	mov	r3, r2
 8000a52:	80fb      	strh	r3, [r7, #6]
uint8_t buffer[4];
	buffer[0] = W25_PAGE_P;
 8000a54:	2302      	movs	r3, #2
 8000a56:	753b      	strb	r3, [r7, #20]
	buffer[1] = (addr >> 16) & 0xFF;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	0c1b      	lsrs	r3, r3, #16
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	757b      	strb	r3, [r7, #21]
	buffer[2] = (addr >> 8) & 0xFF;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	75bb      	strb	r3, [r7, #22]
	buffer[3] = addr & 0xFF;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	75fb      	strb	r3, [r7, #23]
	Flash_Select();
 8000a6e:	f7ff ff1d 	bl	80008ac <Flash_Select>
	Flash_Transmit(buffer, 4);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2104      	movs	r1, #4
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff61 	bl	8000940 <Flash_Transmit>
	Flash_Transmit_float(data, dataSize);
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	4619      	mov	r1, r3
 8000a82:	68b8      	ldr	r0, [r7, #8]
 8000a84:	f7ff ff70 	bl	8000968 <Flash_Transmit_float>
	Flash_UnSelect();
 8000a88:	f7ff ff26 	bl	80008d8 <Flash_UnSelect>
}
 8000a8c:	bf00      	nop
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <Flash_Write_float>:
		Flash_SimpleWriteAPage(addr+quota,data+quota,dataSize-quota);
		Flash_WaitForWritingComplete();
	}
}

void Flash_Write_float(uint32_t addr, float* data, uint32_t dataSize){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
uint8_t buffer[4];
uint16_t quota;
uint32_t inpage_addr;

	if (dataSize==0)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d056      	beq.n	8000b54 <Flash_Write_float+0xc0>
		return;

	// quota is the data size trasferred until now
	quota=0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	83fb      	strh	r3, [r7, #30]

	// define the starting write position inside the first Flash page to write...
	inpage_addr=addr & (EXT_FLASH_PAGE_SIZE-1);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	61bb      	str	r3, [r7, #24]

	// ... so I can detect if more than 1 Flash page has still to be written
	while ((dataSize-quota+inpage_addr)>EXT_FLASH_PAGE_SIZE){
 8000ab0:	e026      	b.n	8000b00 <Flash_Write_float+0x6c>
	//loop here inside, until more than 1 Flash page...

		Flash_Select();
 8000ab2:	f7ff fefb 	bl	80008ac <Flash_Select>
		buffer[0] = W25_W_ENABLE;
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	753b      	strb	r3, [r7, #20]
		Flash_Transmit(buffer, 1);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff3d 	bl	8000940 <Flash_Transmit>
		Flash_UnSelect();
 8000ac6:	f7ff ff07 	bl	80008d8 <Flash_UnSelect>
		Flash_SimpleWriteAPage_float(addr+quota,data+quota,(EXT_FLASH_PAGE_SIZE-inpage_addr));
 8000aca:	8bfa      	ldrh	r2, [r7, #30]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	18d0      	adds	r0, r2, r3
 8000ad0:	8bfb      	ldrh	r3, [r7, #30]
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	18d1      	adds	r1, r2, r3
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	f7ff ffaf 	bl	8000a46 <Flash_SimpleWriteAPage_float>
		quota+=(EXT_FLASH_PAGE_SIZE-inpage_addr);
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	8bfa      	ldrh	r2, [r7, #30]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000af6:	83fb      	strh	r3, [r7, #30]
		// having aligned data to page border on the first writing
		// next writings start from 0 position inside a page
		inpage_addr=0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
		Flash_WaitForWritingComplete();
 8000afc:	f7ff ff48 	bl	8000990 <Flash_WaitForWritingComplete>
	while ((dataSize-quota+inpage_addr)>EXT_FLASH_PAGE_SIZE){
 8000b00:	8bfb      	ldrh	r3, [r7, #30]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4413      	add	r3, r2
 8000b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b0e:	d8d0      	bhi.n	8000ab2 <Flash_Write_float+0x1e>
	}
	// now just the final Flash page...
	if (dataSize-quota) {
 8000b10:	8bfb      	ldrh	r3, [r7, #30]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d01e      	beq.n	8000b56 <Flash_Write_float+0xc2>
		Flash_Select();
 8000b18:	f7ff fec8 	bl	80008ac <Flash_Select>
		buffer[0] = W25_W_ENABLE;
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	753b      	strb	r3, [r7, #20]
		Flash_Transmit(buffer, 1);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2101      	movs	r1, #1
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff0a 	bl	8000940 <Flash_Transmit>
		Flash_UnSelect();
 8000b2c:	f7ff fed4 	bl	80008d8 <Flash_UnSelect>
		Flash_SimpleWriteAPage_float(addr+quota,data+quota,dataSize-quota);
 8000b30:	8bfa      	ldrh	r2, [r7, #30]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	18d0      	adds	r0, r2, r3
 8000b36:	8bfb      	ldrh	r3, [r7, #30]
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	18d1      	adds	r1, r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	8bfb      	ldrh	r3, [r7, #30]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f7ff ff7c 	bl	8000a46 <Flash_SimpleWriteAPage_float>
		Flash_WaitForWritingComplete();
 8000b4e:	f7ff ff1f 	bl	8000990 <Flash_WaitForWritingComplete>
 8000b52:	e000      	b.n	8000b56 <Flash_Write_float+0xc2>
		return;
 8000b54:	bf00      	nop
	}
}
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <Flash_ChipErase>:
 * @BRIEF	Full chip erase to 0XFF
 * 			Chip Erase may need up to 100s
 * 			(typ. 20s)
 * 			waiting the writing complete in each page
 *********************************/
void Flash_ChipErase(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
uint8_t buffer[4];
	Flash_Select();
 8000b62:	f7ff fea3 	bl	80008ac <Flash_Select>
	buffer[0] = W25_W_ENABLE;
 8000b66:	2306      	movs	r3, #6
 8000b68:	713b      	strb	r3, [r7, #4]
	Flash_Transmit(buffer, 1);
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fee6 	bl	8000940 <Flash_Transmit>
	Flash_UnSelect();
 8000b74:	f7ff feb0 	bl	80008d8 <Flash_UnSelect>

	buffer[0] = W25_CH_ERASE;
 8000b78:	23c7      	movs	r3, #199	@ 0xc7
 8000b7a:	713b      	strb	r3, [r7, #4]
	Flash_Select();
 8000b7c:	f7ff fe96 	bl	80008ac <Flash_Select>
	Flash_Transmit(buffer, 1);
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2101      	movs	r1, #1
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fedb 	bl	8000940 <Flash_Transmit>
	Flash_UnSelect();
 8000b8a:	f7ff fea5 	bl	80008d8 <Flash_UnSelect>
	Flash_WaitForWritingComplete();
 8000b8e:	f7ff feff 	bl	8000990 <Flash_WaitForWritingComplete>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <Flash_ReadJedecID>:
 * 			10H ->	 5Mb		11H ->  10Mb		12H ->  20Mb
 * 			13H ->  40Mb		14H ->  80Mb		15H ->  16Mb
 * 			16H ->  32Mb		17H ->  64Mb		18H -> 128Mb
 * 			19H -> 256Mb		20H -> 512Mb		21H ->   1Gb
 ******************************************************************/
uint32_t Flash_ReadJedecID() {
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b084      	sub	sp, #16
 8000b9e:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint8_t data[3];
uint32_t result;

	buffer[0] = W25_JEDEC_ID;
 8000ba0:	239f      	movs	r3, #159	@ 0x9f
 8000ba2:	723b      	strb	r3, [r7, #8]
	Flash_Select();
 8000ba4:	f7ff fe82 	bl	80008ac <Flash_Select>
	Flash_Transmit(buffer, 1);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	2101      	movs	r1, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fec6 	bl	8000940 <Flash_Transmit>
	Flash_Receive(data, 3);
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2103      	movs	r1, #3
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fe99 	bl	80008f0 <Flash_Receive>
	Flash_UnSelect();
 8000bbe:	f7ff fe8b 	bl	80008d8 <Flash_UnSelect>
	result=((data[0]<<16) | (data[1] <<8) | data[2]);
 8000bc2:	793b      	ldrb	r3, [r7, #4]
 8000bc4:	041a      	lsls	r2, r3, #16
 8000bc6:	797b      	ldrb	r3, [r7, #5]
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	79ba      	ldrb	r2, [r7, #6]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
	return result;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <Flash_ReadSFDP>:


/*********************************
 * @RETURN	256byte SFDP register content:
 *********************************/
void Flash_ReadSFDP(uint8_t* data) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
uint8_t buffer[5];
	buffer[0] = W25_R_SFPD_REG;
 8000be4:	235a      	movs	r3, #90	@ 0x5a
 8000be6:	723b      	strb	r3, [r7, #8]
	for (uint8_t k=1;k<5;k++)
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e008      	b.n	8000c00 <Flash_ReadSFDP+0x24>
		buffer[k]=0;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	3310      	adds	r3, #16
 8000bf2:	443b      	add	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t k=1;k<5;k++)
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d9f3      	bls.n	8000bee <Flash_ReadSFDP+0x12>
	Flash_Select();
 8000c06:	f7ff fe51 	bl	80008ac <Flash_Select>
	Flash_Transmit(buffer, 5);
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	2105      	movs	r1, #5
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe95 	bl	8000940 <Flash_Transmit>
	Flash_Receive(data, 256);
 8000c16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fe68 	bl	80008f0 <Flash_Receive>
	Flash_UnSelect();
 8000c20:	f7ff fe5a 	bl	80008d8 <Flash_UnSelect>
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <Flash_TestAvailability>:
 * 			reading SFDP record, it must return
 * 			a string beginning with "SFDP"
 * @RETURN	1 	test passed
 * 			0	no
 *********************************/
uint8_t Flash_TestAvailability() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0c2      	sub	sp, #264	@ 0x108
 8000c30:	af00      	add	r7, sp, #0
uint8_t data[256];
uint8_t test=1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

	for (uint8_t k=0;k!=254;k++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
 8000c3e:	e00c      	b.n	8000c5a <Flash_TestAvailability+0x2e>
		  data[k]=0xFF;
 8000c40:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 8000c44:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000c48:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c4c:	21ff      	movs	r1, #255	@ 0xff
 8000c4e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t k=0;k!=254;k++)
 8000c50:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 8000c54:	3301      	adds	r3, #1
 8000c56:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
 8000c5a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 8000c5e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c60:	d1ee      	bne.n	8000c40 <Flash_TestAvailability+0x14>
	Flash_ReadSFDP(data);
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ffb9 	bl	8000bdc <Flash_ReadSFDP>
	if (data[0]!='S')
 8000c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b53      	cmp	r3, #83	@ 0x53
 8000c76:	d002      	beq.n	8000c7e <Flash_TestAvailability+0x52>
		test=0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	if (data[1]!='F')
 8000c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c86:	785b      	ldrb	r3, [r3, #1]
 8000c88:	2b46      	cmp	r3, #70	@ 0x46
 8000c8a:	d002      	beq.n	8000c92 <Flash_TestAvailability+0x66>
		test=0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	if (data[2]!='D')
 8000c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c9a:	789b      	ldrb	r3, [r3, #2]
 8000c9c:	2b44      	cmp	r3, #68	@ 0x44
 8000c9e:	d002      	beq.n	8000ca6 <Flash_TestAvailability+0x7a>
		test=0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	if (data[3]!='P')
 8000ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000cae:	78db      	ldrb	r3, [r3, #3]
 8000cb0:	2b50      	cmp	r3, #80	@ 0x50
 8000cb2:	d002      	beq.n	8000cba <Flash_TestAvailability+0x8e>
		test=0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	return test;
 8000cba:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <Flash_Init>:

/******************************************************************
 * @BRIEF	reading manufacutrer and device ID
 * 			checking if connected device is a Winbond Flash
 ******************************************************************/
uint8_t Flash_Init(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
uint32_t JedecID;
	HAL_Delay(6);	// supposing init is called on system startup: 5 ms (tPUW) required after power-up to be fully available
 8000cce:	2006      	movs	r0, #6
 8000cd0:	f000 f8d4 	bl	8000e7c <HAL_Delay>
	Flash_Reset();
 8000cd4:	f000 f816 	bl	8000d04 <Flash_Reset>
	if (!Flash_TestAvailability())
 8000cd8:	f7ff ffa8 	bl	8000c2c <Flash_TestAvailability>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <Flash_Init+0x1e>
		return 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <Flash_Init+0x34>
	JedecID=Flash_ReadJedecID() ;	//select the memSize byte
 8000ce6:	f7ff ff58 	bl	8000b9a <Flash_ReadJedecID>
 8000cea:	6078      	str	r0, [r7, #4]
	if (((JedecID >> 16) & 0XFF) != 0xEF)  // if ManufacturerID is not Winbond (0xEF)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	0c1b      	lsrs	r3, r3, #16
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2bef      	cmp	r3, #239	@ 0xef
 8000cf4:	d001      	beq.n	8000cfa <Flash_Init+0x32>
		return 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <Flash_Init+0x34>
	return 1;  //return memSize as per table in Flash_ReadJedecID() definition
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <Flash_Reset>:





void Flash_Reset(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
uint8_t command;
	command = W25_RESET_EN;
 8000d0a:	2366      	movs	r3, #102	@ 0x66
 8000d0c:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
 8000d0e:	f7ff fdcd 	bl	80008ac <Flash_Select>
	Flash_Transmit(&command, 1);
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	2101      	movs	r1, #1
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fe12 	bl	8000940 <Flash_Transmit>
	Flash_UnSelect();
 8000d1c:	f7ff fddc 	bl	80008d8 <Flash_UnSelect>
	command = W25_RESET;
 8000d20:	2399      	movs	r3, #153	@ 0x99
 8000d22:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
 8000d24:	f7ff fdc2 	bl	80008ac <Flash_Select>
	Flash_Transmit(&command, 1);
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fe07 	bl	8000940 <Flash_Transmit>
	Flash_UnSelect();
 8000d32:	f7ff fdd1 	bl	80008d8 <Flash_UnSelect>
	HAL_Delay(1);	// 30us needed by resetting
 8000d36:	2001      	movs	r0, #1
 8000d38:	f000 f8a0 	bl	8000e7c <HAL_Delay>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d48:	f7ff fd9e 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f001 fd41 	bl	80027f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fba7 	bl	80004c8 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d88:	08002878 	.word	0x08002878
  ldr r2, =_sbss
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d90:	20000084 	.word	0x20000084

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f931 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fcbc 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f93b 	bl	8001076 <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 f911 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	@ (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000080 	.word	0x20000080

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000080 	.word	0x20000080

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_Delay+0x44>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffde 	bl	8000e64 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	@ (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	@ (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	@ 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	@ 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff47 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff5c 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffb0 	bl	8000fe4 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	@ 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e159      	b.n	8001360 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 8148 	bne.w	800135a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d130      	bne.n	8001144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80a2 	beq.w	800135a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b57      	ldr	r3, [pc, #348]	@ (8001378 <HAL_GPIO_Init+0x2e8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a56      	ldr	r2, [pc, #344]	@ (8001378 <HAL_GPIO_Init+0x2e8>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b54      	ldr	r3, [pc, #336]	@ (8001378 <HAL_GPIO_Init+0x2e8>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001232:	4a52      	ldr	r2, [pc, #328]	@ (800137c <HAL_GPIO_Init+0x2ec>)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a49      	ldr	r2, [pc, #292]	@ (8001380 <HAL_GPIO_Init+0x2f0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x202>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a48      	ldr	r2, [pc, #288]	@ (8001384 <HAL_GPIO_Init+0x2f4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x1fe>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a47      	ldr	r2, [pc, #284]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x1fa>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a46      	ldr	r2, [pc, #280]	@ (800138c <HAL_GPIO_Init+0x2fc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x1f6>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a45      	ldr	r2, [pc, #276]	@ (8001390 <HAL_GPIO_Init+0x300>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x1f2>
 800127e:	2304      	movs	r3, #4
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001282:	2307      	movs	r3, #7
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x204>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x204>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	@ (800137c <HAL_GPIO_Init+0x2ec>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b38      	ldr	r3, [pc, #224]	@ (8001394 <HAL_GPIO_Init+0x304>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001394 <HAL_GPIO_Init+0x304>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <HAL_GPIO_Init+0x304>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a24      	ldr	r2, [pc, #144]	@ (8001394 <HAL_GPIO_Init+0x304>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <HAL_GPIO_Init+0x304>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132a:	4a1a      	ldr	r2, [pc, #104]	@ (8001394 <HAL_GPIO_Init+0x304>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <HAL_GPIO_Init+0x304>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001354:	4a0f      	ldr	r2, [pc, #60]	@ (8001394 <HAL_GPIO_Init+0x304>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f aea2 	bls.w	80010ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e267      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d075      	beq.n	8001506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800141a:	4b88      	ldr	r3, [pc, #544]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b04      	cmp	r3, #4
 8001424:	d00c      	beq.n	8001440 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001426:	4b85      	ldr	r3, [pc, #532]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800142e:	2b08      	cmp	r3, #8
 8001430:	d112      	bne.n	8001458 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001432:	4b82      	ldr	r3, [pc, #520]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800143e:	d10b      	bne.n	8001458 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	4b7e      	ldr	r3, [pc, #504]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d05b      	beq.n	8001504 <HAL_RCC_OscConfig+0x108>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d157      	bne.n	8001504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e242      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001460:	d106      	bne.n	8001470 <HAL_RCC_OscConfig+0x74>
 8001462:	4b76      	ldr	r3, [pc, #472]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a75      	ldr	r2, [pc, #468]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e01d      	b.n	80014ac <HAL_RCC_OscConfig+0xb0>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x98>
 800147a:	4b70      	ldr	r3, [pc, #448]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6f      	ldr	r2, [pc, #444]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b6d      	ldr	r3, [pc, #436]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a6c      	ldr	r2, [pc, #432]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0xb0>
 8001494:	4b69      	ldr	r3, [pc, #420]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a68      	ldr	r2, [pc, #416]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b66      	ldr	r3, [pc, #408]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a65      	ldr	r2, [pc, #404]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fcd6 	bl	8000e64 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fcd2 	bl	8000e64 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	@ 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e207      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b5b      	ldr	r3, [pc, #364]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0xc0>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fcc2 	bl	8000e64 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fcbe 	bl	8000e64 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	@ 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e1f3      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f6:	4b51      	ldr	r3, [pc, #324]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0xe8>
 8001502:	e000      	b.n	8001506 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d063      	beq.n	80015da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001512:	4b4a      	ldr	r3, [pc, #296]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151e:	4b47      	ldr	r3, [pc, #284]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001526:	2b08      	cmp	r3, #8
 8001528:	d11c      	bne.n	8001564 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152a:	4b44      	ldr	r3, [pc, #272]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d116      	bne.n	8001564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	4b41      	ldr	r3, [pc, #260]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x152>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e1c7      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b3b      	ldr	r3, [pc, #236]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4937      	ldr	r1, [pc, #220]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	e03a      	b.n	80015da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156c:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <HAL_RCC_OscConfig+0x244>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff fc77 	bl	8000e64 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fc73 	bl	8000e64 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1a8      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4925      	ldr	r1, [pc, #148]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]
 80015ac:	e015      	b.n	80015da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <HAL_RCC_OscConfig+0x244>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fc56 	bl	8000e64 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015bc:	f7ff fc52 	bl	8000e64 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e187      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d036      	beq.n	8001654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d016      	beq.n	800161c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_RCC_OscConfig+0x248>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fc36 	bl	8000e64 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff fc32 	bl	8000e64 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e167      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_RCC_OscConfig+0x240>)
 8001610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x200>
 800161a:	e01b      	b.n	8001654 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_RCC_OscConfig+0x248>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fc1f 	bl	8000e64 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	e00e      	b.n	8001648 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff fc1b 	bl	8000e64 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d907      	bls.n	8001648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e150      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
 800163c:	40023800 	.word	0x40023800
 8001640:	42470000 	.word	0x42470000
 8001644:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	4b88      	ldr	r3, [pc, #544]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800164a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ea      	bne.n	800162a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8097 	beq.w	8001790 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001666:	4b81      	ldr	r3, [pc, #516]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10f      	bne.n	8001692 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b7d      	ldr	r3, [pc, #500]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	4a7c      	ldr	r2, [pc, #496]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	@ 0x40
 8001682:	4b7a      	ldr	r3, [pc, #488]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b77      	ldr	r3, [pc, #476]	@ (8001870 <HAL_RCC_OscConfig+0x474>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d118      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169e:	4b74      	ldr	r3, [pc, #464]	@ (8001870 <HAL_RCC_OscConfig+0x474>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a73      	ldr	r2, [pc, #460]	@ (8001870 <HAL_RCC_OscConfig+0x474>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fbdb 	bl	8000e64 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b2:	f7ff fbd7 	bl	8000e64 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e10c      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001870 <HAL_RCC_OscConfig+0x474>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2ea>
 80016d8:	4b64      	ldr	r3, [pc, #400]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a63      	ldr	r2, [pc, #396]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x324>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x30c>
 80016ee:	4b5f      	ldr	r3, [pc, #380]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f2:	4a5e      	ldr	r2, [pc, #376]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fa:	4b5c      	ldr	r3, [pc, #368]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fe:	4a5b      	ldr	r2, [pc, #364]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6713      	str	r3, [r2, #112]	@ 0x70
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0x324>
 8001708:	4b58      	ldr	r3, [pc, #352]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170c:	4a57      	ldr	r2, [pc, #348]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	@ 0x70
 8001714:	4b55      	ldr	r3, [pc, #340]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001718:	4a54      	ldr	r2, [pc, #336]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d015      	beq.n	8001754 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fb9c 	bl	8000e64 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff fb98 	bl	8000e64 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0cb      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001746:	4b49      	ldr	r3, [pc, #292]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0ee      	beq.n	8001730 <HAL_RCC_OscConfig+0x334>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fb86 	bl	8000e64 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff fb82 	bl	8000e64 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0b5      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001772:	4b3e      	ldr	r3, [pc, #248]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ee      	bne.n	800175c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001784:	4b39      	ldr	r3, [pc, #228]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	4a38      	ldr	r2, [pc, #224]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800178a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800178e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a1 	beq.w	80018dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800179a:	4b34      	ldr	r3, [pc, #208]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d05c      	beq.n	8001860 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d141      	bne.n	8001832 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <HAL_RCC_OscConfig+0x478>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fb56 	bl	8000e64 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff fb52 	bl	8000e64 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e087      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	4b27      	ldr	r3, [pc, #156]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	019b      	lsls	r3, r3, #6
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	3b01      	subs	r3, #1
 80017f4:	041b      	lsls	r3, r3, #16
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	491b      	ldr	r1, [pc, #108]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_RCC_OscConfig+0x478>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff fb2b 	bl	8000e64 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001812:	f7ff fb27 	bl	8000e64 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e05c      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x416>
 8001830:	e054      	b.n	80018dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <HAL_RCC_OscConfig+0x478>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fb14 	bl	8000e64 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fb10 	bl	8000e64 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e045      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_RCC_OscConfig+0x470>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x444>
 800185e:	e03d      	b.n	80018dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d107      	bne.n	8001878 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e038      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000
 8001874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_RCC_OscConfig+0x4ec>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d028      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d121      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11a      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018a8:	4013      	ands	r3, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d111      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	085b      	lsrs	r3, r3, #1
 80018c0:	3b01      	subs	r3, #1
 80018c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d107      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0cc      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001900:	4b68      	ldr	r3, [pc, #416]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d90c      	bls.n	8001928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b65      	ldr	r3, [pc, #404]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b63      	ldr	r3, [pc, #396]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0b8      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001940:	4b59      	ldr	r3, [pc, #356]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a58      	ldr	r2, [pc, #352]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800194a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001958:	4b53      	ldr	r3, [pc, #332]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a52      	ldr	r2, [pc, #328]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	4b50      	ldr	r3, [pc, #320]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	494d      	ldr	r1, [pc, #308]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d044      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b47      	ldr	r3, [pc, #284]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d119      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e07f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019aa:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e06f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e067      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ca:	4b37      	ldr	r3, [pc, #220]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f023 0203 	bic.w	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4934      	ldr	r1, [pc, #208]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019dc:	f7ff fa42 	bl	8000e64 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e4:	f7ff fa3e 	bl	8000e64 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e04f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 020c 	and.w	r2, r3, #12
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1eb      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d20c      	bcs.n	8001a34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e032      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4916      	ldr	r1, [pc, #88]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	490e      	ldr	r1, [pc, #56]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a72:	f000 f821 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a76:	4602      	mov	r2, r0
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	490a      	ldr	r1, [pc, #40]	@ (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	5ccb      	ldrb	r3, [r1, r3]
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	4a09      	ldr	r2, [pc, #36]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f9a2 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08002858 	.word	0x08002858
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001abc:	b090      	sub	sp, #64	@ 0x40
 8001abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad0:	4b59      	ldr	r3, [pc, #356]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d00d      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x40>
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	f200 80a1 	bhi.w	8001c24 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x34>
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d003      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aea:	e09b      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b53      	ldr	r3, [pc, #332]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8001aee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001af0:	e09b      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001af2:	4b53      	ldr	r3, [pc, #332]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001af4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001af6:	e098      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b02:	4b4d      	ldr	r3, [pc, #308]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d028      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	2200      	movs	r2, #0
 8001b16:	623b      	str	r3, [r7, #32]
 8001b18:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b20:	2100      	movs	r1, #0
 8001b22:	4b47      	ldr	r3, [pc, #284]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b24:	fb03 f201 	mul.w	r2, r3, r1
 8001b28:	2300      	movs	r3, #0
 8001b2a:	fb00 f303 	mul.w	r3, r0, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a43      	ldr	r2, [pc, #268]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b32:	fba0 1202 	umull	r1, r2, r0, r2
 8001b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b38:	460a      	mov	r2, r1
 8001b3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b3e:	4413      	add	r3, r2
 8001b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b44:	2200      	movs	r2, #0
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	61fa      	str	r2, [r7, #28]
 8001b4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b52:	f7fe fb41 	bl	80001d8 <__aeabi_uldivmod>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b5e:	e053      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b60:	4b35      	ldr	r3, [pc, #212]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	2200      	movs	r2, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	617a      	str	r2, [r7, #20]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b72:	f04f 0b00 	mov.w	fp, #0
 8001b76:	4652      	mov	r2, sl
 8001b78:	465b      	mov	r3, fp
 8001b7a:	f04f 0000 	mov.w	r0, #0
 8001b7e:	f04f 0100 	mov.w	r1, #0
 8001b82:	0159      	lsls	r1, r3, #5
 8001b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b88:	0150      	lsls	r0, r2, #5
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b92:	eb63 090b 	sbc.w	r9, r3, fp
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ba2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ba6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001baa:	ebb2 0408 	subs.w	r4, r2, r8
 8001bae:	eb63 0509 	sbc.w	r5, r3, r9
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	00eb      	lsls	r3, r5, #3
 8001bbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc0:	00e2      	lsls	r2, r4, #3
 8001bc2:	4614      	mov	r4, r2
 8001bc4:	461d      	mov	r5, r3
 8001bc6:	eb14 030a 	adds.w	r3, r4, sl
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	eb45 030b 	adc.w	r3, r5, fp
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bde:	4629      	mov	r1, r5
 8001be0:	028b      	lsls	r3, r1, #10
 8001be2:	4621      	mov	r1, r4
 8001be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be8:	4621      	mov	r1, r4
 8001bea:	028a      	lsls	r2, r1, #10
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	60fa      	str	r2, [r7, #12]
 8001bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bfc:	f7fe faec 	bl	80001d8 <__aeabi_uldivmod>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4613      	mov	r3, r2
 8001c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	3301      	adds	r3, #1
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c22:	e002      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3740      	adds	r7, #64	@ 0x40
 8001c30:	46bd      	mov	sp, r7
 8001c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	00f42400 	.word	0x00f42400
 8001c40:	017d7840 	.word	0x017d7840

08001c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e07b      	b.n	8001d4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d108      	bne.n	8001c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c66:	d009      	beq.n	8001c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
 8001c6e:	e005      	b.n	8001c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fd7e 	bl	8000798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d00:	ea42 0103 	orr.w	r1, r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	f003 0104 	and.w	r1, r3, #4
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	f003 0210 	and.w	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69da      	ldr	r2, [r3, #28]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b088      	sub	sp, #32
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	4613      	mov	r3, r2
 8001d64:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d66:	f7ff f87d 	bl	8000e64 <HAL_GetTick>
 8001d6a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d001      	beq.n	8001d80 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e12a      	b.n	8001fd6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_SPI_Transmit+0x36>
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e122      	b.n	8001fd6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_SPI_Transmit+0x48>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e11b      	b.n	8001fd6 <HAL_SPI_Transmit+0x280>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2203      	movs	r2, #3
 8001daa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	88fa      	ldrh	r2, [r7, #6]
 8001dbe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	88fa      	ldrh	r2, [r7, #6]
 8001dc4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dec:	d10f      	bne.n	8001e0e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e18:	2b40      	cmp	r3, #64	@ 0x40
 8001e1a:	d007      	beq.n	8001e2c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e34:	d152      	bne.n	8001edc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_SPI_Transmit+0xee>
 8001e3e:	8b7b      	ldrh	r3, [r7, #26]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d145      	bne.n	8001ed0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e48:	881a      	ldrh	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e54:	1c9a      	adds	r2, r3, #2
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e68:	e032      	b.n	8001ed0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d112      	bne.n	8001e9e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7c:	881a      	ldrh	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e88:	1c9a      	adds	r2, r3, #2
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e9c:	e018      	b.n	8001ed0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e9e:	f7fe ffe1 	bl	8000e64 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d803      	bhi.n	8001eb6 <HAL_SPI_Transmit+0x160>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d102      	bne.n	8001ebc <HAL_SPI_Transmit+0x166>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e082      	b.n	8001fd6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1c7      	bne.n	8001e6a <HAL_SPI_Transmit+0x114>
 8001eda:	e053      	b.n	8001f84 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <HAL_SPI_Transmit+0x194>
 8001ee4:	8b7b      	ldrh	r3, [r7, #26]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d147      	bne.n	8001f7a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	7812      	ldrb	r2, [r2, #0]
 8001ef6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f10:	e033      	b.n	8001f7a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d113      	bne.n	8001f48 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	7812      	ldrb	r2, [r2, #0]
 8001f2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f46:	e018      	b.n	8001f7a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f48:	f7fe ff8c 	bl	8000e64 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d803      	bhi.n	8001f60 <HAL_SPI_Transmit+0x20a>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5e:	d102      	bne.n	8001f66 <HAL_SPI_Transmit+0x210>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e02d      	b.n	8001fd6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1c6      	bne.n	8001f12 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fbd9 	bl	8002740 <SPI_EndRxTxTransaction>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b088      	sub	sp, #32
 8001fe2:	af02      	add	r7, sp, #8
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d001      	beq.n	8001ffe <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e104      	b.n	8002208 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002006:	d112      	bne.n	800202e <HAL_SPI_Receive+0x50>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10e      	bne.n	800202e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2204      	movs	r2, #4
 8002014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002018:	88fa      	ldrh	r2, [r7, #6]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4613      	mov	r3, r2
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f8f3 	bl	8002210 <HAL_SPI_TransmitReceive>
 800202a:	4603      	mov	r3, r0
 800202c:	e0ec      	b.n	8002208 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800202e:	f7fe ff19 	bl	8000e64 <HAL_GetTick>
 8002032:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_SPI_Receive+0x62>
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0e1      	b.n	8002208 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_SPI_Receive+0x74>
 800204e:	2302      	movs	r3, #2
 8002050:	e0da      	b.n	8002208 <HAL_SPI_Receive+0x22a>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2204      	movs	r2, #4
 800205e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020a0:	d10f      	bne.n	80020c2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020cc:	2b40      	cmp	r3, #64	@ 0x40
 80020ce:	d007      	beq.n	80020e0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d170      	bne.n	80021ca <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020e8:	e035      	b.n	8002156 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d115      	bne.n	8002124 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f103 020c 	add.w	r2, r3, #12
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002104:	7812      	ldrb	r2, [r2, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002122:	e018      	b.n	8002156 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002124:	f7fe fe9e 	bl	8000e64 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d803      	bhi.n	800213c <HAL_SPI_Receive+0x15e>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213a:	d102      	bne.n	8002142 <HAL_SPI_Receive+0x164>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e058      	b.n	8002208 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1c4      	bne.n	80020ea <HAL_SPI_Receive+0x10c>
 8002160:	e038      	b.n	80021d4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d113      	bne.n	8002198 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217a:	b292      	uxth	r2, r2
 800217c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002182:	1c9a      	adds	r2, r3, #2
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002196:	e018      	b.n	80021ca <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002198:	f7fe fe64 	bl	8000e64 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d803      	bhi.n	80021b0 <HAL_SPI_Receive+0x1d2>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d102      	bne.n	80021b6 <HAL_SPI_Receive+0x1d8>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e01e      	b.n	8002208 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1c6      	bne.n	8002162 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fa4b 	bl	8002674 <SPI_EndRxTransaction>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002206:	2300      	movs	r3, #0
  }
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	@ 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800221e:	2301      	movs	r3, #1
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002222:	f7fe fe1f 	bl	8000e64 <HAL_GetTick>
 8002226:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800222e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800223a:	7ffb      	ldrb	r3, [r7, #31]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d00c      	beq.n	800225a <HAL_SPI_TransmitReceive+0x4a>
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002246:	d106      	bne.n	8002256 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <HAL_SPI_TransmitReceive+0x46>
 8002250:	7ffb      	ldrb	r3, [r7, #31]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d001      	beq.n	800225a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
 8002258:	e17f      	b.n	800255a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_SPI_TransmitReceive+0x5c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_SPI_TransmitReceive+0x5c>
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e174      	b.n	800255a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_SPI_TransmitReceive+0x6e>
 800227a:	2302      	movs	r3, #2
 800227c:	e16d      	b.n	800255a <HAL_SPI_TransmitReceive+0x34a>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b04      	cmp	r3, #4
 8002290:	d003      	beq.n	800229a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2205      	movs	r2, #5
 8002296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	887a      	ldrh	r2, [r7, #2]
 80022aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	887a      	ldrh	r2, [r7, #2]
 80022c2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022da:	2b40      	cmp	r3, #64	@ 0x40
 80022dc:	d007      	beq.n	80022ee <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022f6:	d17e      	bne.n	80023f6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_SPI_TransmitReceive+0xf6>
 8002300:	8afb      	ldrh	r3, [r7, #22]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d16c      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	1c9a      	adds	r2, r3, #2
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800232a:	e059      	b.n	80023e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d11b      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x162>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d016      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x162>
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	2b01      	cmp	r3, #1
 8002348:	d113      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	881a      	ldrh	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	1c9a      	adds	r2, r3, #2
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d119      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x1a4>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d014      	beq.n	80023b4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002394:	b292      	uxth	r2, r2
 8002396:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239c:	1c9a      	adds	r2, r3, #2
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023b0:	2301      	movs	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023b4:	f7fe fd56 	bl	8000e64 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d80d      	bhi.n	80023e0 <HAL_SPI_TransmitReceive+0x1d0>
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ca:	d009      	beq.n	80023e0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0bc      	b.n	800255a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1a0      	bne.n	800232c <HAL_SPI_TransmitReceive+0x11c>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d19b      	bne.n	800232c <HAL_SPI_TransmitReceive+0x11c>
 80023f4:	e082      	b.n	80024fc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_SPI_TransmitReceive+0x1f4>
 80023fe:	8afb      	ldrh	r3, [r7, #22]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d171      	bne.n	80024e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	330c      	adds	r3, #12
 800240e:	7812      	ldrb	r2, [r2, #0]
 8002410:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800242a:	e05d      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b02      	cmp	r3, #2
 8002438:	d11c      	bne.n	8002474 <HAL_SPI_TransmitReceive+0x264>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d017      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x264>
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	2b01      	cmp	r3, #1
 8002448:	d114      	bne.n	8002474 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d119      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x2a6>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d014      	beq.n	80024b6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024b2:	2301      	movs	r3, #1
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024b6:	f7fe fcd5 	bl	8000e64 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d803      	bhi.n	80024ce <HAL_SPI_TransmitReceive+0x2be>
 80024c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d102      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x2c4>
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e038      	b.n	800255a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d19c      	bne.n	800242c <HAL_SPI_TransmitReceive+0x21c>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d197      	bne.n	800242c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024fc:	6a3a      	ldr	r2, [r7, #32]
 80024fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f91d 	bl	8002740 <SPI_EndRxTxTransaction>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e01d      	b.n	800255a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10a      	bne.n	800253c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002558:	2300      	movs	r3, #0
  }
}
 800255a:	4618      	mov	r0, r3
 800255c:	3728      	adds	r7, #40	@ 0x28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002574:	f7fe fc76 	bl	8000e64 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4413      	add	r3, r2
 8002582:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002584:	f7fe fc6e 	bl	8000e64 <HAL_GetTick>
 8002588:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800258a:	4b39      	ldr	r3, [pc, #228]	@ (8002670 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	015b      	lsls	r3, r3, #5
 8002590:	0d1b      	lsrs	r3, r3, #20
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800259a:	e054      	b.n	8002646 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d050      	beq.n	8002646 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025a4:	f7fe fc5e 	bl	8000e64 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d902      	bls.n	80025ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d13d      	bne.n	8002636 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80025c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025d2:	d111      	bne.n	80025f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025dc:	d004      	beq.n	80025e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e6:	d107      	bne.n	80025f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002600:	d10f      	bne.n	8002622 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002620:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e017      	b.n	8002666 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3b01      	subs	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4013      	ands	r3, r2
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	bf0c      	ite	eq
 8002656:	2301      	moveq	r3, #1
 8002658:	2300      	movne	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	429a      	cmp	r2, r3
 8002662:	d19b      	bne.n	800259c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000000 	.word	0x20000000

08002674 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002688:	d111      	bne.n	80026ae <SPI_EndRxTransaction+0x3a>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002692:	d004      	beq.n	800269e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800269c:	d107      	bne.n	80026ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026b6:	d12a      	bne.n	800270e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c0:	d012      	beq.n	80026e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	2180      	movs	r1, #128	@ 0x80
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f7ff ff49 	bl	8002564 <SPI_WaitFlagStateUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02d      	beq.n	8002734 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e026      	b.n	8002736 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	2101      	movs	r1, #1
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff ff36 	bl	8002564 <SPI_WaitFlagStateUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01a      	beq.n	8002734 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002702:	f043 0220 	orr.w	r2, r3, #32
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e013      	b.n	8002736 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2200      	movs	r2, #0
 8002716:	2101      	movs	r1, #1
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff ff23 	bl	8002564 <SPI_WaitFlagStateUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e000      	b.n	8002736 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2201      	movs	r2, #1
 8002754:	2102      	movs	r1, #2
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff ff04 	bl	8002564 <SPI_WaitFlagStateUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e032      	b.n	80027d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002772:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <SPI_EndRxTxTransaction+0xa0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1b      	ldr	r2, [pc, #108]	@ (80027e4 <SPI_EndRxTxTransaction+0xa4>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	0d5b      	lsrs	r3, r3, #21
 800277e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002790:	d112      	bne.n	80027b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	2180      	movs	r1, #128	@ 0x80
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff fee1 	bl	8002564 <SPI_WaitFlagStateUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d016      	beq.n	80027d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e00f      	b.n	80027d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ce:	2b80      	cmp	r3, #128	@ 0x80
 80027d0:	d0f2      	beq.n	80027b8 <SPI_EndRxTxTransaction+0x78>
 80027d2:	e000      	b.n	80027d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80027d4:	bf00      	nop
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000000 	.word	0x20000000
 80027e4:	165e9f81 	.word	0x165e9f81

080027e8 <memset>:
 80027e8:	4402      	add	r2, r0
 80027ea:	4603      	mov	r3, r0
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d100      	bne.n	80027f2 <memset+0xa>
 80027f0:	4770      	bx	lr
 80027f2:	f803 1b01 	strb.w	r1, [r3], #1
 80027f6:	e7f9      	b.n	80027ec <memset+0x4>

080027f8 <__libc_init_array>:
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002830 <__libc_init_array+0x38>)
 80027fc:	4c0d      	ldr	r4, [pc, #52]	@ (8002834 <__libc_init_array+0x3c>)
 80027fe:	1b64      	subs	r4, r4, r5
 8002800:	10a4      	asrs	r4, r4, #2
 8002802:	2600      	movs	r6, #0
 8002804:	42a6      	cmp	r6, r4
 8002806:	d109      	bne.n	800281c <__libc_init_array+0x24>
 8002808:	4d0b      	ldr	r5, [pc, #44]	@ (8002838 <__libc_init_array+0x40>)
 800280a:	4c0c      	ldr	r4, [pc, #48]	@ (800283c <__libc_init_array+0x44>)
 800280c:	f000 f818 	bl	8002840 <_init>
 8002810:	1b64      	subs	r4, r4, r5
 8002812:	10a4      	asrs	r4, r4, #2
 8002814:	2600      	movs	r6, #0
 8002816:	42a6      	cmp	r6, r4
 8002818:	d105      	bne.n	8002826 <__libc_init_array+0x2e>
 800281a:	bd70      	pop	{r4, r5, r6, pc}
 800281c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002820:	4798      	blx	r3
 8002822:	3601      	adds	r6, #1
 8002824:	e7ee      	b.n	8002804 <__libc_init_array+0xc>
 8002826:	f855 3b04 	ldr.w	r3, [r5], #4
 800282a:	4798      	blx	r3
 800282c:	3601      	adds	r6, #1
 800282e:	e7f2      	b.n	8002816 <__libc_init_array+0x1e>
 8002830:	08002870 	.word	0x08002870
 8002834:	08002870 	.word	0x08002870
 8002838:	08002870 	.word	0x08002870
 800283c:	08002874 	.word	0x08002874

08002840 <_init>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	bf00      	nop
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr

0800284c <_fini>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	bf00      	nop
 8002850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002852:	bc08      	pop	{r3}
 8002854:	469e      	mov	lr, r3
 8002856:	4770      	bx	lr
